// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sample.proto

#ifndef PROTOBUF_sample_2eproto__INCLUDED
#define PROTOBUF_sample_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_sample_2eproto();
void protobuf_AssignDesc_sample_2eproto();
void protobuf_ShutdownFile_sample_2eproto();

class Sample;
class Result;

// ===================================================================

class Sample : public ::google::protobuf::Message {
 public:
  Sample();
  virtual ~Sample();

  Sample(const Sample& from);

  inline Sample& operator=(const Sample& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sample& default_instance();

  void Swap(Sample* other);

  // implements Message ----------------------------------------------

  Sample* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sample& from);
  void MergeFrom(const Sample& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string fname = 1;
  inline bool has_fname() const;
  inline void clear_fname();
  static const int kFnameFieldNumber = 1;
  inline const ::std::string& fname() const;
  inline void set_fname(const ::std::string& value);
  inline void set_fname(const char* value);
  inline void set_fname(const char* value, size_t size);
  inline ::std::string* mutable_fname();
  inline ::std::string* release_fname();
  inline void set_allocated_fname(::std::string* fname);

  // required bytes data = 2;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 2;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // optional string software = 3;
  inline bool has_software() const;
  inline void clear_software();
  static const int kSoftwareFieldNumber = 3;
  inline const ::std::string& software() const;
  inline void set_software(const ::std::string& value);
  inline void set_software(const char* value);
  inline void set_software(const char* value, size_t size);
  inline ::std::string* mutable_software();
  inline ::std::string* release_software();
  inline void set_allocated_software(::std::string* software);

  // optional string platform = 4;
  inline bool has_platform() const;
  inline void clear_platform();
  static const int kPlatformFieldNumber = 4;
  inline const ::std::string& platform() const;
  inline void set_platform(const ::std::string& value);
  inline void set_platform(const char* value);
  inline void set_platform(const char* value, size_t size);
  inline ::std::string* mutable_platform();
  inline ::std::string* release_platform();
  inline void set_allocated_platform(::std::string* platform);

  // @@protoc_insertion_point(class_scope:Sample)
 private:
  inline void set_has_fname();
  inline void clear_has_fname();
  inline void set_has_data();
  inline void clear_has_data();
  inline void set_has_software();
  inline void clear_has_software();
  inline void set_has_platform();
  inline void clear_has_platform();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* fname_;
  ::std::string* data_;
  ::std::string* software_;
  ::std::string* platform_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_sample_2eproto();
  friend void protobuf_AssignDesc_sample_2eproto();
  friend void protobuf_ShutdownFile_sample_2eproto();

  void InitAsDefaultInstance();
  static Sample* default_instance_;
};
// -------------------------------------------------------------------

class Result : public ::google::protobuf::Message {
 public:
  Result();
  virtual ~Result();

  Result(const Result& from);

  inline Result& operator=(const Result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Result& default_instance();

  void Swap(Result* other);

  // implements Message ----------------------------------------------

  Result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Result& from);
  void MergeFrom(const Result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 risk = 1;
  inline bool has_risk() const;
  inline void clear_risk();
  static const int kRiskFieldNumber = 1;
  inline ::google::protobuf::int32 risk() const;
  inline void set_risk(::google::protobuf::int32 value);

  // optional int32 score = 2;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 2;
  inline ::google::protobuf::int32 score() const;
  inline void set_score(::google::protobuf::int32 value);

  // optional bool crash = 3;
  inline bool has_crash() const;
  inline void clear_crash();
  static const int kCrashFieldNumber = 3;
  inline bool crash() const;
  inline void set_crash(bool value);

  // optional string detail = 4;
  inline bool has_detail() const;
  inline void clear_detail();
  static const int kDetailFieldNumber = 4;
  inline const ::std::string& detail() const;
  inline void set_detail(const ::std::string& value);
  inline void set_detail(const char* value);
  inline void set_detail(const char* value, size_t size);
  inline ::std::string* mutable_detail();
  inline ::std::string* release_detail();
  inline void set_allocated_detail(::std::string* detail);

  // optional bytes zip_reuslt = 5;
  inline bool has_zip_reuslt() const;
  inline void clear_zip_reuslt();
  static const int kZipReusltFieldNumber = 5;
  inline const ::std::string& zip_reuslt() const;
  inline void set_zip_reuslt(const ::std::string& value);
  inline void set_zip_reuslt(const char* value);
  inline void set_zip_reuslt(const void* value, size_t size);
  inline ::std::string* mutable_zip_reuslt();
  inline ::std::string* release_zip_reuslt();
  inline void set_allocated_zip_reuslt(::std::string* zip_reuslt);

  // @@protoc_insertion_point(class_scope:Result)
 private:
  inline void set_has_risk();
  inline void clear_has_risk();
  inline void set_has_score();
  inline void clear_has_score();
  inline void set_has_crash();
  inline void clear_has_crash();
  inline void set_has_detail();
  inline void clear_has_detail();
  inline void set_has_zip_reuslt();
  inline void clear_has_zip_reuslt();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 risk_;
  ::google::protobuf::int32 score_;
  ::std::string* detail_;
  ::std::string* zip_reuslt_;
  bool crash_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_sample_2eproto();
  friend void protobuf_AssignDesc_sample_2eproto();
  friend void protobuf_ShutdownFile_sample_2eproto();

  void InitAsDefaultInstance();
  static Result* default_instance_;
};
// ===================================================================


// ===================================================================

// Sample

// required string fname = 1;
inline bool Sample::has_fname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Sample::set_has_fname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Sample::clear_has_fname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Sample::clear_fname() {
  if (fname_ != &::google::protobuf::internal::kEmptyString) {
    fname_->clear();
  }
  clear_has_fname();
}
inline const ::std::string& Sample::fname() const {
  return *fname_;
}
inline void Sample::set_fname(const ::std::string& value) {
  set_has_fname();
  if (fname_ == &::google::protobuf::internal::kEmptyString) {
    fname_ = new ::std::string;
  }
  fname_->assign(value);
}
inline void Sample::set_fname(const char* value) {
  set_has_fname();
  if (fname_ == &::google::protobuf::internal::kEmptyString) {
    fname_ = new ::std::string;
  }
  fname_->assign(value);
}
inline void Sample::set_fname(const char* value, size_t size) {
  set_has_fname();
  if (fname_ == &::google::protobuf::internal::kEmptyString) {
    fname_ = new ::std::string;
  }
  fname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Sample::mutable_fname() {
  set_has_fname();
  if (fname_ == &::google::protobuf::internal::kEmptyString) {
    fname_ = new ::std::string;
  }
  return fname_;
}
inline ::std::string* Sample::release_fname() {
  clear_has_fname();
  if (fname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = fname_;
    fname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Sample::set_allocated_fname(::std::string* fname) {
  if (fname_ != &::google::protobuf::internal::kEmptyString) {
    delete fname_;
  }
  if (fname) {
    set_has_fname();
    fname_ = fname;
  } else {
    clear_has_fname();
    fname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bytes data = 2;
inline bool Sample::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Sample::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Sample::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Sample::clear_data() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& Sample::data() const {
  return *data_;
}
inline void Sample::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void Sample::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void Sample::set_data(const void* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Sample::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  return data_;
}
inline ::std::string* Sample::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Sample::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string software = 3;
inline bool Sample::has_software() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Sample::set_has_software() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Sample::clear_has_software() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Sample::clear_software() {
  if (software_ != &::google::protobuf::internal::kEmptyString) {
    software_->clear();
  }
  clear_has_software();
}
inline const ::std::string& Sample::software() const {
  return *software_;
}
inline void Sample::set_software(const ::std::string& value) {
  set_has_software();
  if (software_ == &::google::protobuf::internal::kEmptyString) {
    software_ = new ::std::string;
  }
  software_->assign(value);
}
inline void Sample::set_software(const char* value) {
  set_has_software();
  if (software_ == &::google::protobuf::internal::kEmptyString) {
    software_ = new ::std::string;
  }
  software_->assign(value);
}
inline void Sample::set_software(const char* value, size_t size) {
  set_has_software();
  if (software_ == &::google::protobuf::internal::kEmptyString) {
    software_ = new ::std::string;
  }
  software_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Sample::mutable_software() {
  set_has_software();
  if (software_ == &::google::protobuf::internal::kEmptyString) {
    software_ = new ::std::string;
  }
  return software_;
}
inline ::std::string* Sample::release_software() {
  clear_has_software();
  if (software_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = software_;
    software_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Sample::set_allocated_software(::std::string* software) {
  if (software_ != &::google::protobuf::internal::kEmptyString) {
    delete software_;
  }
  if (software) {
    set_has_software();
    software_ = software;
  } else {
    clear_has_software();
    software_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string platform = 4;
inline bool Sample::has_platform() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Sample::set_has_platform() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Sample::clear_has_platform() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Sample::clear_platform() {
  if (platform_ != &::google::protobuf::internal::kEmptyString) {
    platform_->clear();
  }
  clear_has_platform();
}
inline const ::std::string& Sample::platform() const {
  return *platform_;
}
inline void Sample::set_platform(const ::std::string& value) {
  set_has_platform();
  if (platform_ == &::google::protobuf::internal::kEmptyString) {
    platform_ = new ::std::string;
  }
  platform_->assign(value);
}
inline void Sample::set_platform(const char* value) {
  set_has_platform();
  if (platform_ == &::google::protobuf::internal::kEmptyString) {
    platform_ = new ::std::string;
  }
  platform_->assign(value);
}
inline void Sample::set_platform(const char* value, size_t size) {
  set_has_platform();
  if (platform_ == &::google::protobuf::internal::kEmptyString) {
    platform_ = new ::std::string;
  }
  platform_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Sample::mutable_platform() {
  set_has_platform();
  if (platform_ == &::google::protobuf::internal::kEmptyString) {
    platform_ = new ::std::string;
  }
  return platform_;
}
inline ::std::string* Sample::release_platform() {
  clear_has_platform();
  if (platform_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = platform_;
    platform_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Sample::set_allocated_platform(::std::string* platform) {
  if (platform_ != &::google::protobuf::internal::kEmptyString) {
    delete platform_;
  }
  if (platform) {
    set_has_platform();
    platform_ = platform;
  } else {
    clear_has_platform();
    platform_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Result

// required int32 risk = 1;
inline bool Result::has_risk() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Result::set_has_risk() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Result::clear_has_risk() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Result::clear_risk() {
  risk_ = 0;
  clear_has_risk();
}
inline ::google::protobuf::int32 Result::risk() const {
  return risk_;
}
inline void Result::set_risk(::google::protobuf::int32 value) {
  set_has_risk();
  risk_ = value;
}

// optional int32 score = 2;
inline bool Result::has_score() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Result::set_has_score() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Result::clear_has_score() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Result::clear_score() {
  score_ = 0;
  clear_has_score();
}
inline ::google::protobuf::int32 Result::score() const {
  return score_;
}
inline void Result::set_score(::google::protobuf::int32 value) {
  set_has_score();
  score_ = value;
}

// optional bool crash = 3;
inline bool Result::has_crash() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Result::set_has_crash() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Result::clear_has_crash() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Result::clear_crash() {
  crash_ = false;
  clear_has_crash();
}
inline bool Result::crash() const {
  return crash_;
}
inline void Result::set_crash(bool value) {
  set_has_crash();
  crash_ = value;
}

// optional string detail = 4;
inline bool Result::has_detail() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Result::set_has_detail() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Result::clear_has_detail() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Result::clear_detail() {
  if (detail_ != &::google::protobuf::internal::kEmptyString) {
    detail_->clear();
  }
  clear_has_detail();
}
inline const ::std::string& Result::detail() const {
  return *detail_;
}
inline void Result::set_detail(const ::std::string& value) {
  set_has_detail();
  if (detail_ == &::google::protobuf::internal::kEmptyString) {
    detail_ = new ::std::string;
  }
  detail_->assign(value);
}
inline void Result::set_detail(const char* value) {
  set_has_detail();
  if (detail_ == &::google::protobuf::internal::kEmptyString) {
    detail_ = new ::std::string;
  }
  detail_->assign(value);
}
inline void Result::set_detail(const char* value, size_t size) {
  set_has_detail();
  if (detail_ == &::google::protobuf::internal::kEmptyString) {
    detail_ = new ::std::string;
  }
  detail_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Result::mutable_detail() {
  set_has_detail();
  if (detail_ == &::google::protobuf::internal::kEmptyString) {
    detail_ = new ::std::string;
  }
  return detail_;
}
inline ::std::string* Result::release_detail() {
  clear_has_detail();
  if (detail_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = detail_;
    detail_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Result::set_allocated_detail(::std::string* detail) {
  if (detail_ != &::google::protobuf::internal::kEmptyString) {
    delete detail_;
  }
  if (detail) {
    set_has_detail();
    detail_ = detail;
  } else {
    clear_has_detail();
    detail_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes zip_reuslt = 5;
inline bool Result::has_zip_reuslt() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Result::set_has_zip_reuslt() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Result::clear_has_zip_reuslt() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Result::clear_zip_reuslt() {
  if (zip_reuslt_ != &::google::protobuf::internal::kEmptyString) {
    zip_reuslt_->clear();
  }
  clear_has_zip_reuslt();
}
inline const ::std::string& Result::zip_reuslt() const {
  return *zip_reuslt_;
}
inline void Result::set_zip_reuslt(const ::std::string& value) {
  set_has_zip_reuslt();
  if (zip_reuslt_ == &::google::protobuf::internal::kEmptyString) {
    zip_reuslt_ = new ::std::string;
  }
  zip_reuslt_->assign(value);
}
inline void Result::set_zip_reuslt(const char* value) {
  set_has_zip_reuslt();
  if (zip_reuslt_ == &::google::protobuf::internal::kEmptyString) {
    zip_reuslt_ = new ::std::string;
  }
  zip_reuslt_->assign(value);
}
inline void Result::set_zip_reuslt(const void* value, size_t size) {
  set_has_zip_reuslt();
  if (zip_reuslt_ == &::google::protobuf::internal::kEmptyString) {
    zip_reuslt_ = new ::std::string;
  }
  zip_reuslt_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Result::mutable_zip_reuslt() {
  set_has_zip_reuslt();
  if (zip_reuslt_ == &::google::protobuf::internal::kEmptyString) {
    zip_reuslt_ = new ::std::string;
  }
  return zip_reuslt_;
}
inline ::std::string* Result::release_zip_reuslt() {
  clear_has_zip_reuslt();
  if (zip_reuslt_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = zip_reuslt_;
    zip_reuslt_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Result::set_allocated_zip_reuslt(::std::string* zip_reuslt) {
  if (zip_reuslt_ != &::google::protobuf::internal::kEmptyString) {
    delete zip_reuslt_;
  }
  if (zip_reuslt) {
    set_has_zip_reuslt();
    zip_reuslt_ = zip_reuslt;
  } else {
    clear_has_zip_reuslt();
    zip_reuslt_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_sample_2eproto__INCLUDED
